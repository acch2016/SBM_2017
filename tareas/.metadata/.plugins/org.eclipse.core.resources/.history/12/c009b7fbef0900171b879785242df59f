/*
 * user.c
 *
 *  Created on: Mar 5, 2017
 *      Author: joab
 */

#include "user.h"
#include "UART.h"
#define ENTER 13

void createQueues(void){
	timeQueue = xQueueCreate(12,sizeof(uint8_t));
	xMutex = xSemaphoreCreateMutex();
}

void sendTime(void *parameter){
	uint8_t fromQueue[12];
	uint32_t n;
	uint8_t qCounter = 0;
	uint8_t *ptrFromQueue = fromQueue;
	uint8_t space[] = "\n\r";
	uint8_t *spacePtr=space;

	while(1){
		for(qCounter;qCounter<=11;qCounter++){
			xQueueReceive(timeQueue, &fromQueue[qCounter], portMAX_DELAY);
		}
		qCounter=0;

		UART_userSend(ptrFromQueue,sizeof(fromQueue));
		UART_userSend(spacePtr,sizeof(space));
	}
}

void getTime_task(void *parameter){


	uint8_t timeBuffer[7];
	uint8_t qCounter=0;
	uint8_t asciiDate[12];
	uint8_t *ptrToDate = asciiDate;

	I2C_Write(I2C0, RTC_DEVICE_ADD, 0x02, 0x44);

	/*Start Timer*/
	I2C_Write(I2C0, RTC_DEVICE_ADD, 0x00, 0x80);

	while(1){
		xSemaphoreTake(xMutex,portMAX_DELAY);
		I2C_Read(I2C0, RTC_DEVICE_ADD, 0x00, timeBuffer, 7);
		xSemaphoreGive(xMutex);

		timeBuffer[0] = timeBuffer[0] & SECONDS_REG_SIZE;
		timeBuffer[1] = timeBuffer[1] & MINUTES_REG_SIZE;
		timeBuffer[2] = timeBuffer[2] & HOURS_REG_SIZE;
		timeBuffer[4] = timeBuffer[4] & DAY_REG_SIZE;
		timeBuffer[5] = timeBuffer[5] & MONTH_REG_SIZE;
		timeBuffer[6] = timeBuffer[6] & YEAR_REG_SIZE;

		asciiDate[0] = ((timeBuffer[0] & BCD_L)) + ASCII_NUMBER_MASK;
		asciiDate[1] = ((timeBuffer[0] & BCD_H)>>4)+ASCII_NUMBER_MASK;
		asciiDate[2] = ((timeBuffer[1] & BCD_L))+ASCII_NUMBER_MASK;
		asciiDate[3] = ((timeBuffer[1] & BCD_H)>>4)+ASCII_NUMBER_MASK;
		asciiDate[4] = ((timeBuffer[2] & BCD_H)>>4)+ASCII_NUMBER_MASK;
		asciiDate[5] = ((timeBuffer[2] & BCD_H)>>4)+ASCII_NUMBER_MASK;
		asciiDate[6] = ((timeBuffer[4] & BCD_L))+ASCII_NUMBER_MASK;
		asciiDate[7] = ((timeBuffer[4] & BCD_H)>>4)+ASCII_NUMBER_MASK;
		asciiDate[8] = ((timeBuffer[5] & BCD_L))+ASCII_NUMBER_MASK;
		asciiDate[9] = ((timeBuffer[5] & BCD_H)>>4)+ASCII_NUMBER_MASK;
		asciiDate[10] = ((timeBuffer[6] & BCD_H)>>4)+ASCII_NUMBER_MASK;
		asciiDate[11] = ((timeBuffer[6] & BCD_H)>>4)+ASCII_NUMBER_MASK;

		for(qCounter;qCounter<=11;qCounter++){
			xQueueSend(timeQueue,&asciiDate[qCounter],1000);
		}
		qCounter=0;

//		PRINTF("Time: %c%c:%c%c:%c%c  Date: %c%c/%c%c/%c%c\r",  (char)asciiDate[5],
//																(char)asciiDate[4],
//																(char)asciiDate[3],
//																(char)asciiDate[2],
//																(char)asciiDate[1],
//																(char)asciiDate[0],
//																(char)asciiDate[11],
//																(char)asciiDate[10],
//																(char)asciiDate[9],
//																(char)asciiDate[8],
//																(char)asciiDate[7],
//																(char)asciiDate[6]);

		vTaskDelay(100);
	}
}


void chat_Task(void *parameter) {

	size_t n;

	QueueHandle_t myQueue;
	uint8_t queue_counter;
	uint8_t fromQueue;
	uint8_t storedQueue[30];

	uint8_t recv_buffer[1];
	uint8_t recv_buffer_b[1];


	//uint8_t* data;//nueva
	while (1) {

		UART_RTOS_Receive(getHandleTeraTerm(), recv_buffer, sizeof(recv_buffer_b), &n);//borre esta
		//data=UART_Echo();//nueva


		if (ENTER == *recv_buffer) {

		//if (ENTER == *recv_buffer) {

			for (queue_counter = 0;queue_counter < uxQueueMessagesWaiting(myQueue);queue_counter++) {
				xQueueReceive(myQueue, &fromQueue, 0); //Receive an item from Queue , the place where it will be posted
				storedQueue[queue_counter] = fromQueue; //storedQueue mandar ala func LCD send string
			}
			//este handler getHandleBlueTerm() es de blue term
			UART_RTOS_Send(getHandleBlueTerm(), (uint8_t *) storedQueue, n);
		}
		xQueueSend(myQueue, recv_buffer, 0); //Post an item to the queue ,

		/**complemento del echo en UART**/
		UART_RTOS_Send(getHandleTeraTerm(), (uint8_t *) recv_buffer, n);
	}
}
